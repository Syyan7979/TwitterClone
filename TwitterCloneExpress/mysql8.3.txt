-- USER RELATED QUERIES
    -- Getting all the users
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_all_users`()
BEGIN
SELECT userId, userName, twitterHandle, email FROM users;
END$$
DELIMITER ;

    -- Getting a particular user given userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_user`(
    IN id VARCHAR(14)
)
BEGIN
SELECT 
	userId, userName, twitterHandle, email 
FROM 
	users
WHERE userId = id;
END$$
DELIMITER ;

    -- Inserting user to users
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `insert_user`(
    IN id VARCHAR(14), 
    IN userN VARCHAR(15), 
    IN twitHand VARCHAR(15), 
    IN userEmail VARCHAR(320), 
    IN pass VARCHAR(128)
)
BEGIN
INSERT INTO
	users 
(userId, userName, twitterHandle, email, password) 
VALUES 
(id, userN, twitHand, userEmail, pass);
END$$
DELIMITER ;

    -- Updating a parameter for a user in users given their userId

    -- Delete a user in users given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `delete_user`(
	IN id VARCHAR(14)
)
BEGIN
DELETE FROM tweets WHERE userId = id;
DELETE FROM follows WHERE followerId = id OR followeeId = id;
DELETE FROM users WHERE userId = id;
END$$
DELIMITER ;

    -- UserName Existence Check
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `check_username_existence`(
	IN userN VARCHAR(15)
)
BEGIN
SELECT
	*
FROM
	users
WHERE
	userName = userN;
END$$
DELIMITER ;

    -- Getting all tweets created by a particular user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_tweets`(
	IN id VARCHAR(14)
)
BEGIN
SELECT 
	*
FROM
	tweets
WHERE 
	userId = id
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

    -- Getting all the followings of a user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_followings`(
	IN id VARCHAR(14)
)
BEGIN
SELECT 
	*
FROM
	follows
WHERE 
	followerId = id
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

    -- Getting all the followers of a user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_followers`(
	IN id VARCHAR(14)
)
BEGIN
SELECT 
	*
FROM
	follows
WHERE 
	followeeId = id
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

    -- Getting the feed of a user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_feed`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	tweetId, userID, replyId, content, media, likes, timestamp
FROM
	tweets
INNER JOIN
	follows
ON
	tweets.userId = follows.followeeId
WHERE
	follows.followerId = id;
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

    -- Getting all the likes of user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_likes`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	tweetId, userID, replyId, content, media, likes, timestamp
FROM
	tweets
INNER JOIN
	likes
ON
	tweets.tweetId = likes.tweetId
WHERE
	likes.userId = id
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

    -- Getting all the media of a user given a userId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `user_medias`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	*
FROM
	tweets
WHERE
	userId = id AND media IS NOT NULL
ORDER BY
	timeStamp DESC;
END$$
DELIMITER ;

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- TWEET RELATED QUERIES
    -- Getting all the tweets
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_all_tweets`()
BEGIN
SELECT * FROM tweets;
END$$
DELIMITER ;

    -- Getting particular tweet given tweetId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_tweet`(
    IN id VARCHAR(14)
)
BEGIN
SELECT 
	*
FROM 
	tweets
WHERE tweetId = id;
END$$
DELIMITER ;

    -- Inserting tweet to tweets
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `insert_tweet`(
	IN tId VARCHAR(14), 
    IN uId VARCHAR(15), 
    IN rId VARCHAR(15), 
    IN cont VARCHAR(280), 
    IN med VARCHAR(255),
    IN numLikes INT
)
BEGIN
INSERT INTO
	tweets 
(tweetId, userId, replyId, content, media, likes, timeStamp) 
VALUES 
(tId, uId, rId, cont, med, numLikes, unix_timestamp());
END$$
DELIMITER ;

    -- Updating a parameter for a tweet in tweets given their twetId

    -- Delete a tweet in tweets given a tweetId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `delete_tweet`(
	IN id VARCHAR(14)
)
BEGIN
UPDATE
	tweets
SET 
	replyId = NULL
WHERE
	replyId = id;
DELETE FROM tweets WHERE tweetId = id;
END$$
DELIMITER ;

    -- Get all the replies of a particular tweet given a tweetId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `tweet_replies`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	*
FROM
	tweets
WHERE
	replyId = id
ORDER BY
	likes DESC;
END$$
DELIMITER ;

	-- Getting all the users that liked the tweet
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `tweet_likers`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	users.userId, users.userName, users.twitterHandle, users.email
FROM
	users
INNER JOIN
	likes
ON
	users.userId = likes.userId
WHERE
	likes.tweetId = id
ORDER BY
	likes.timeStamp DESC;
END$$
DELIMITER ;


-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- FOLLOWING RELATED QUERIES
    -- Getting all the follows
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_all_follows`()
BEGIN
SELECT * FROM follows;
END$$
DELIMITER ;

    -- Getting particular following given followId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_follow`(
    IN id VARCHAR(14)
)
BEGIN
SELECT 
	*
FROM 
	follows
WHERE followId = id;
END$$
DELIMITER ;

    -- Inserting following to follows
CREATE DEFINER=`root`@`%` PROCEDURE `insert_following`(
	IN mainId VARCHAR(14), 
    IN frId VARCHAR(14), 
    IN feId VARCHAR(14)
)
BEGIN
INSERT INTO
	follows 
(followId, followerId, followeeId, timeStamp) 
VALUES 
(mainId, frId, feId, unix_timestamp());
END

    -- Delete a following in follows given a followId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `delete_following`(
	IN id VARCHAR(14)
)
BEGIN
DELETE FROM follows WHERE followId = id;
END$$
DELIMITER ;

    -- Following dependency Check
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `check_following_existence`(
	IN frId VARCHAR(14),
    IN feId VARCHAR(14)
)
BEGIN
SELECT
	*
FROM
	follows
WHERE
	followerId = frId AND followeeId = feId;
END$$
DELIMITER ;

-- LIKES RELATED QUERIES
    -- Getting all the likes
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_all_likes`()
BEGIN
SELECT * FROM likes;
END$$
DELIMITER ;

    -- Getting a particular like given likeId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `get_like`(
	IN id VARCHAR(14)
)
BEGIN
SELECT
	*
FROM
	likes
WHERE
	likeId = id;
END$$
DELIMITER ;

    -- Inserting like to likes
CREATE DEFINER=`root`@`%` PROCEDURE `insert_like`(
	IN mainId VARCHAR(14), 
    IN usrId VARCHAR(14), 
    IN twtId VARCHAR(14)
)
BEGIN
INSERT INTO
	follows 
(likeId, userId, tweetId, timeStamp) 
VALUES 
(mainId, usrId, twtId, unix_timestamp());
END

    -- Delete a like in likes given a likeId
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `delete_like`(
	IN id VARCHAR(14)
)
BEGIN
DELETE FROM likes WHERE likeId = id;
END$$
DELIMITER ;

    -- Like dependency Check
DELIMITER $$
CREATE DEFINER=`root`@`%` PROCEDURE `check_like_existence`(
	IN usrId VARCHAR(14),
    IN twtId VARCHAR(14)
)
BEGIN
SELECT
	*
FROM
	likes
WHERE
	userId = usrId AND tweetId = twtId;
END$$
DELIMITER ;
